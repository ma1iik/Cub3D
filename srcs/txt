void ray_till_wall_h(t_data *data)
{
    int     r;
    double rx;
    double ry;
    double xo;
    double yo;
    int dof;
    double atan;
    int mx;
    int my;
    
    r = 0;
    while (r++ < 1)
    {
        dof = 0;
        atan = -1 / tan(data->pa);
        if (data->pa < M_PI)
        {
            //printf("looking down\n");
            ry = (int)((((round(data->pl_tx_y) / TX_L)) * TX_L)  - TX_L/2);
            // ry = (int)((((round(data->pl_tx_y) / TX_L)) * TX_L));
            rx = ((data->pl_tx_y) - ry) * atan + data->pl_tx_x;
            //printf("starting rx[%.0f]ry[%.0f]\n", rx, ry);
            yo = TX_L;
            xo = - yo * atan;
        }
        else if (data->pa > M_PI)
        {
            //printf("looking up\n");
            ry = (int)((((round(data->pl_tx_y - TX_L) / TX_L)) * TX_L) + TX_L/2);
            rx = ((data->pl_tx_y) - ry) * atan + data->pl_tx_x;
            //printf("starting rx[%.0f]ry[%.0f]\n", rx, ry);
            //my_mlx_pixel_put(data, rx, ry, 0xFF0000);
             yo = -TX_L;
             xo = - yo * atan;
        }
        else if (data->pa == 0 || data->pa == M_PI)
        {
            printf("looking straight\n");
            rx = data->pl_tx_x;
            ry = data->pl_tx_y;
            dof = 30;
        }
        while (rx >= 0 && rx < data->map_l * TX_L && ry >= 0 && ry < data->map_h * TX_L)
        {
            //printf("entered\n");
           // printf("mapl %d map h %d\n", data->map_l, data->map_h);
            mx = (int) ceilf(rx / TX_L) - 1;
            my = (int) ceilf(ry / TX_L) - 1;
            if (mx < 0 || mx >= data->map_l || my < 0 || my >= data->map_h)
                break;
            if (data->map[my][mx] && data->map[my][mx] == '1')
            {
                dof = 30;
                if(data->pa > 0 && data->pa < M_PI)
                    ry -= TX_L;
                //printf("walls found at mx[%d]my[%d]\n", mx, my);
                //printf("walls found at rx[%.0f]ry[%.0f]\n", rx, ry);
                break ;
            }
            else
            {
                if (rx + xo < 0 )
                {
                    printf("here1\n");
                    rx = 0;
                }
                else if (rx + xo > data->map_l * TX_L)
                {
                    printf("here2\n");
                    rx = data->map_l * TX_L;
                }
                else
                    rx += xo;
                if (ry + yo < 0)
                {
                    printf("here3\n");
                    ry = 0;
                }
                else if (ry+ yo > data->map_h * TX_L)
                {
                    printf("here4\n");
                    ry = data->map_h * TX_L;
                }
                else
                    ry += yo;
                dof++;
            }
        }
       // printf("mx[%d]my[%d]\n", mx * TX_L - 10, my * TX_L);
        // printf("mx[%d]my[%d]\n", mx, my);
        //printf("rx[%.0f]ry[%.0f]\n", rx, ry);
        dda(data, rx, ry, 0xFF0000);
        mlx_put_image_to_window(data->mlx, data->win, data->img.img, 0, 0);
    }
}